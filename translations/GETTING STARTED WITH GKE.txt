GETTING STARTED WITH GKE

OBJECTIVES:
a)In this lab, you learn how to perform the following tasks:
b)Provision a Kubernetes cluster using Kubernetes Engine.
c)Deploy and manage Docker containers using kubectl.

##Steps
1. Confirm that needed APIs are enabled
	Kubernetes Engine API
	Container Registry API
	
2.	Start a Kubernetes Engine cluster
	-  Type this partial command:
		export MY_ZONE=us-central1-a
		
	- Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
		gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2

	- After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
		kubect1 version
			Result: The gcloud container clusters create command automatically authenticated kubectl for you.
		
3. Run and deploy a container
	-  Launch a single instance of the nginx container. (Nginx is a popular web server.)
		kubectl create deploy nginx --image=nginx:1.17.10
		 NOTE: This use of the kubectl create command caused Kubernetes to create a deployment consisting of a single pod containing the nginx container. A Kubernetes deployment keeps a given number of pods up and running even in the event of failures among the nodes on which they run. In this command, you launched the default number of pods, which is 1
	
	- View the pod running the nginx container, execute this command:
		kubectl get pods
		
	- Expose the nginx container to the Internet, using this command:
		kubectl expose deployment nginx --port 80 --type LoadBalancer
			Result: Kubernetes created a service and an external load balancer with a public IP address attached to it. 
	
	- View the new service, using this command:
		kubectl get services
			Result: Displays External IP address
			
	- Open a new web browser tab and paste your cluster's external IP address into the address bar. The default home page of the Nginx browser is displayed.
	
	- Scale up the number of pods running on your service:
		kubectl scale deployment nginx --replicas 3
			NOTE: Scaling up a deployment is useful when you want to increase available resources for an application that is becoming more popular
	
	- Confirm that Kubernetes has updated the number of pods:
		kubectl get pods
		
	- Confirm that your external IP address has not changed:
		kubectl get services
		
	
	- Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.
	